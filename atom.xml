<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Prateek Dayal]]></title>
  <link href="http://blog.prateekdayal.net/atom.xml" rel="self"/>
  <link href="http://blog.prateekdayal.net/"/>
  <updated>2014-12-05T12:55:09-08:00</updated>
  <id>http://blog.prateekdayal.net/</id>
  <author>
    <name><![CDATA[Prateek Dayal]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Thoughts on Software]]></title>
    <link href="http://blog.prateekdayal.net/thoughts-on-software"/>
    <updated>2014-12-05T11:10:00-08:00</updated>
    <id>http://blog.prateekdayal.net/thoughts-on-software</id>
    <content type="html"><![CDATA[<p>After writing software in some form or the other for the last seven years, I have finally started thinking about it. I think it&rsquo;s partly because I am not writing a lot of software anymore and I can look at things more objectively. Anyhow, here is what&rsquo;s on my mind right now. I do want to note here that these are my views and not the views of SupportBee as a company</p>

<h3>No Software</h3>

<p>The best software is probably the one that never needs to be written. It doesn&rsquo;t take anyone&rsquo;s time or confuse anyone. It lets people spend time on things they care about (or should care about). So if there is no compelling reason to write software, I would choose to not write it.</p>

<h3>Software as an art form</h3>

<p>I am starting to look at software as an art form, just like painting or music. Unlike paintings (but like music), software can be duplicated flawlessly and every user can have a perfect copy of what you have created. So unlike a painting, software can reach more people and offer the experience that you intended.</p>

<h3>Software can inspire</h3>

<p>Like great art or music, software can inspire people. Even though it&rsquo;s the pictures in Instagram that inspire people to take better shots, I would argue that Instagram as a software has inspired more people to be photographers.  In any publishing medium, the 80-20 rule almost always applies. 20% of the people create and 80% consume. However, every now and then a software platform comes around that inspires more people to create (and even more people to consume, thereby maintaining the 80-20). Blogs, Twitter, Instagram and our own humble attempt, Muziboo inspired a lot more people to create.</p>

<h3>Low waste</h3>

<p>A lot of us seek expression through creation. There are a lot of inspiring people and things around us and one way to appreciate and celebrate that is by making our own things. If you were an architect, you would build buildings and that would involve a lot of natural resources and leave a mark on our planet. With software, the long lasting impact on our planet is a lot lesser (ofcourse you want everything to run on green electricity!) and so you can play around a lot more with it. That isn&rsquo;t to say that there is no waste &ndash; time is the valuable commodity in the software world.</p>

<h3>Software is primarily about handling errors</h3>

<p>With the rise of the smart phone, people are carrying software with them everywhere they go and using it like an extension of their self. Text messaging is a great example of it. Music is another one. People use these two on holidays, during their runs and places we would not have been able to imagine just ten years back. When software is used so much and in so many different conditions (poor network for example), it&rsquo;s bound to fail. How you handle those errors and recover from them and keep your users in the loop is going to determine how frustrated your users get. And that will determine how likely people are to use your software in their most private and personal moments. WHen you are celebrating a great moment and your camera app fails to initialize, you are going to make someone wary of using it the next time around in a similar setting. To make a truely great software, you have to design around the possible errors. It can&rsquo;t be an after thought.</p>

<p>That&rsquo;s all I have in mind for now! Good to get it out into this post and clear up the space for other things.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Silence]]></title>
    <link href="http://blog.prateekdayal.net/silence"/>
    <updated>2014-12-04T10:26:00-08:00</updated>
    <id>http://blog.prateekdayal.net/silence</id>
    <content type="html"><![CDATA[<p>There are always some basic principles at work in any domain. In case of music, there are some basic chords, in case of programming, there are some basic constructs (<a href="http://en.wikipedia.org/wiki/Lisp_%28programming_language%29">LISP</a> is a wonderful example of this). The better you understand these basic constructs, the more progress you make. Often times, what you need is not a technique but revisiting fundamentals with more real world experience to understand them better and improve your craft. A lot of people enter programming to get a job done. They spend the first few years hacking things together and learning on the fly. In pursuit of excellence, some people start looking for these fundamentals and start finding texts like <a href="http://mitpress.mit.edu/sicp/">SICP</a>. I have come to realize that life is no different. You get into this world and start running with it and then after a while you get curious about what&rsquo;s going on. What are these emotions, what is stress, what is joy. What is this liberation that people talk about? That leads some people to the path of spirituality (or self exploration). Like programming, there are many texts and schools of thought but they all essentially point to the same ideas. As you peel layers you find that something vast yet simple at work. However unlike mathematics or physics, we still don&rsquo;t have a solid vocabulary for describing it (and probably we will never have one). So unlike programming, people can only give you pointers to it and it&rsquo;s for you to explore and find it. Meditation is a good tool for starting the exploration. In my journey so far, I have found that silence is a great way to describe the sub-stratum. In your happiest moments and in your saddest ones, you experience a silence. If you go far our on a trip, you experience silence. Before everything, there is a silence. Life is like a beautiful painting drawn on the canvas of silence and stillness. It&rsquo;s what stays with you in your loneliest moments and in your most public moments. Silence is divine but you need to break it to feel it sometimes. Paintings, poems and music break the silence in beautiful ways and hence have such a universal appeal.</p>

<p>One of the most un-assuming teachers of our times, Papaji had only one teaching &ndash; &ldquo;Keep Quiet&rdquo; (I have embedded a video below). All the answers you need, all the strength and compassion that you want, you&rsquo;ll find when you rest in the silence past all the noise of your life. That&rsquo;s why we get re-energizing glimpses of the infinite when we are in a state of flow, whether we reach it through meditation, programming or endurance training &ndash; we find them in moments where we have shut off all noise of our existence. You can seek it by reciting the lord&rsquo;s name or sitting quietly looking at a river or sitting quietly programming. But it&rsquo;s there &ndash; you just need do discover it.</p>

<iframe width="420" height="315" src="http://blog.prateekdayal.net//www.youtube.com/embed/lMC1RLma7tw" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lesser Stuff]]></title>
    <link href="http://blog.prateekdayal.net/lesser"/>
    <updated>2014-07-02T10:20:00-07:00</updated>
    <id>http://blog.prateekdayal.net/lesser</id>
    <content type="html"><![CDATA[<p>In October 2013, I went on a two week motorbike trip in Vietnam. I rode from Ho Chi Minh City upto Mui Ne, stopping at several places on the way and rode back stopping at the same places again. To prepare for the trip, I bought a small backpack and fit a bunch of stuff into it. Apart from some clothes, I fit in my laptop, my ipad, earbuds, a water bottle and a few other things I absolutely needed. After being on the road for about a week, I noticed that I wasn&rsquo;t missing my other &lsquo;stuff&rsquo;. At the end of the second week, it was clear to me that I could live off this stuff for months. It was a liberating feeling. I had everything I needed to live a good life with me &ndash; my bike to take me to places, my laptop so I could work on stuff I cared about and enough essentials to keep me going as a person. It was my first experience with &lsquo;lesser&rsquo; stuff and I decided to stick with it. Since then I have been living off the same backpack. It weighs about 8 kg and it goes everywhere with me without being a burden.</p>

<p>Since then, I have tried to have lesser stuff in other aspects of my life too. After all, physical baggage isn&rsquo;t the only kind of baggage we carry around. Lesser fears, lesser grudges and lesser expectations from others.  Also fewer pre-conceived notions about life and people. As a result I have far fewer things to worry about now. If less is more in software, it&rsquo;s certainly true of our lives!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Illusion of Predictability]]></title>
    <link href="http://blog.prateekdayal.net/the-illusion-of-predictability"/>
    <updated>2014-04-11T08:09:00-07:00</updated>
    <id>http://blog.prateekdayal.net/the-illusion-of-predictability</id>
    <content type="html"><![CDATA[<p>As humans, we like to be in control of our future and our destiny. As entrepreneurs we want and many a times we are expected to be able to predict the future. When people ask us about our future plans, they are rarely satisfied with execution plans. More often than not, they want to know how big we think our team will be or how much bigger the business will be in 12 to 18 months. That&rsquo;s what gets them excited about the company. We see this all around us and we are tempted to believe that we can actually predict the future. When our predictions don&rsquo;t come true (or the future doesn&rsquo;t align with the image we had of it in our mind), we think we just need to get better at being able to predict. Or worse, we blame the current for being against us.</p>

<p>The illusion of predictability also comes with other problems. It makes you more judgemental where you don&rsquo;t need to be. At startup events, I see many entrepreneurs and ecosystem players write off startups in minutes of meeting the teams for the first time. In their mind, based on their experience, they can clearly predict the failure of an attempt. The success of a startup depends on the skills of the founder and the team, the quality of the product and the market conditions. All of these are constantly changing. A smart team can learn from it&rsquo;s mistakes, a competitor can actually help you create a market and other random things may happen.</p>

<p>Accepting that you can&rsquo;t predict the future can be intimidating at first but liberating in the end. In fact, you can turn these interactions around and make them a lot more pleasant and productive for everyone. I have been in the startup world for about 7 years now and met dozens of entrepreneurs over this time (across countries). I have been surprised by the outcome of their startups. Some that I expected to succeed failed and some that I saw no hope in did quite well eventually. After a few years of being silly, I had to accept that I suck at predicting. After the acceptance came the liberating feeling that I don&rsquo;t even need to predict. Being able to meet really young companies is a wonder opportunity. If I look at the companies and founders without judging them, whether things go north or south for them, I have more data points to come up with a hypothesis of what helps companies succeed. For example, in case of <a href="https://twitter.com/paraschopra">Paras</a>, I noticed that he didn&rsquo;t stop pivoting until an idea stuck (we both did a music startup at some point). In case of <a href="https://twitter.com/nischalshetty">Nischal</a>, he never lost sight of the product and product driven growth (I had a chance to hang out with him in Chile). Both have been at it for years and both are bootstrapped.</p>

<p>I now believe that instead of trying to get better at predicting, I should learn to get better at identifying the seeds. In fact even the value of an ecosystem should be in helping good seeds grow into big trees. If you can only spot greatness once it has manifested itself fully, you are probably in the wrong profession.</p>

<p>On a related note, here is a great video from Dr Saras Sarasvathi on entrepreneurship that talks about prediction and control.</p>

<iframe width="560" height="315" src="http://blog.prateekdayal.net//www.youtube.com/embed/t5HZW4NqZ-E" frameborder="0" allowfullscreen></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Questions to ask (and avoid asking) fellow entrepreneurs]]></title>
    <link href="http://blog.prateekdayal.net/questions-to-ask-and-avoid-asking-fellow-entrepreneurs"/>
    <updated>2013-11-12T09:44:00-08:00</updated>
    <id>http://blog.prateekdayal.net/questions-to-ask-and-avoid-asking-fellow-entrepreneurs</id>
    <content type="html"><![CDATA[<p>Startup ecosystems are on the rise everywhere. There are more startups, more mentors, more events and more money floating around than ever before. Unfortunately, more is not always better. Having been around since the <a href="http://harisays.wordpress.com/2007/09/02/occ-meet-on-2-sep-07/">first OCC meetup</a> in Bangalore, I have seen the meetups (and the ecosystem) evolve over the years. Truth be told, I have lost interest in most startup events and it&rsquo;s not because I think there is nothing to learn out there. Discussions with entrepreneurs often turn into a discussion about things that don&rsquo;t matter as much &ndash; funding news of other companies and discussions about getting into the next accelerator or incubator. These are legitimate discussions but they are very unproductive use of face-time with people. A quick google search on funding or accelerators will lead to hundreds of blog posts, videos and dozens of books.</p>

<p>I want to take this opportunity to clear my stand on funding. I think if you are operating from India and have any kind of real traction, you probably don&rsquo;t need to worry about money. You should really be focusing on revenues and acquiring customers. Operating costs in India are so low that your funding requirements are already much lower than other parts of the world. That&rsquo;s what we are doing in <a href="https://supportbee.com">SupportBee</a>. We tried raising a bit last year but very quickly decided that it was not worth the time. Not having money forced us to focus on revenues and customers and ignore everything else. I must accept that in the past I have gotten carried away and indulged in ongoing funding/investment landscape decisions with fellow entrepreneurs. However, I am going to bail out of those discussions pretty quickly from now on. I personally find my time better spent simply <a href="http://getsomeheadspace.com">meditating</a> instead.</p>

<p>However here are some questions that I do enjoy asking entrepreneurs and wish more entrepreneurs asked me (simply because I have atleast some first hand insights here that might be useful to others)</p>

<ul>
<li>How old is your company and how long did it take you to launch. What slowed you down or helped you get the product out the door faster?</li>
<li>What kind of traction do you have. What about revenues? How fast are they growing (or why not)?</li>
<li>What things have made the biggest impact on your customer acquisition. What has helped lower your churn? What has driven up the engagement?</li>
<li>What are your biggest acquisition channels. Do you focus more on organic or paid acquisition? Why one or the other or both?</li>
<li>What hiring channels have worked for you? How do you work? Do you have sales people? If not, why?</li>
<li>How do you prioritize feature requests? How do you deliver customer support? How do you tie the two together?</li>
</ul>


<p>Startups are so hard that if you meet someone with any traction, there are so many great things to learn from them. It doesn&rsquo;t even matter if you think they have cracked it bigtime or not. Asking the right questions is the key. If you think someone&rsquo;s idea doesn&rsquo;t make sense, ask them what they see in it. If you think someone is in an over crowded space, ask them how they are still selling in that space. Try to get real answers out of people. Andrew Warner did it with star entrepreneurs and you can do it with your local heroes (and heroes to be). Just be nice and curious and most people are happy to share their insights.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Empathy]]></title>
    <link href="http://blog.prateekdayal.net/empathy"/>
    <updated>2013-10-30T10:10:00-07:00</updated>
    <id>http://blog.prateekdayal.net/empathy</id>
    <content type="html"><![CDATA[<p>If I look back at the last six years of my startup life, I have made a lot of mistakes and judgemental errors. I have been right several times but I have been painfully wrong a lot of times as well. Thankfully over the years I accumulated a big pool of mistakes to try and see some patterns in there. Some of the defining ones are</p>

<ul>
<li>Delivering useful feedback in the most unhelpful way to people.</li>
<li>Not understanding customer problems deeply even when I wanted to.</li>
<li>Mistakes in defining the product&rsquo;s scope or direction. Not being able to resolve the conflict between what I want the product to do and what our customers want the product to do.</li>
<li>Mistakes in hiring and scaling the team</li>
</ul>


<p>If  a great product is the number one thing that will make you successful, the ability to understand and work with people is going to be the most important factor in building that product. Whether it&rsquo;s talking to customers or your co-founder or your team members or advisors, you are always working with other people. Understanding people is the first step in being able to work with them.</p>

<p>Empathy is a great term to describe what I mean. According to Google, empathy is <em>the ability to understand and share the feelings of another</em>. As we grow up, we develop a worldview, our sense of right and wrong, our established ways of doing things and it gets harder and harder to see different perspectives. We are also never taught this skill in any formal way. We are taught writing so we can communicate our ideas better. We are taught maths and science so we can operate in the real world but we never take classes in figuring out people or figuring out what drives them. Atleast not in the Engineering world that I came from. I may go as far as saying that even understanding our own drivers is actually a pretty significant leap.</p>

<p>Let me illustrate with a few personal examples. I once worked for a startup a year or so out of college and as much as I wanted to contribute to the company, I could never make a meaningful impact. I have also been in situations where I not been able to help a team member achieve their best. Having been on both sides of the table, I can see the pattern finally. The mistake is not spending enough time understanding individuals and figuring out what drives them and then helping them define a role that helps them achieve their potential and also contribute to the the business.  A few weeks ago, I read <a href="http://www.businessinsider.com/marissa-mayer-biography-2013-8?op=1">Marissa Mayer&rsquo;s</a> biography and <a href="http://avinasha.com">Avinasha</a> and I talked about how this line caught our attention.</p>

<blockquote><p>She’d already countered Apple’s offers by giving her people what they really wanted. Sometimes it was raises. Sometimes it was independence. Sometimes it was new titles. Sometimes it was actually more work, more responsibility. She knew what her people wanted. None of her reports ended up quitting to join Apple.</p></blockquote>

<p>Read more: <a href="http://www.businessinsider.com/marissa-mayer-biography-2013-8#ixzz2jAPoNqGQ">http://www.businessinsider.com/marissa-mayer-biography-2013-8#ixzz2jAPoNqGQ</a>&#8221;</p>

<p>Even if Marissa&rsquo;s personal driver was making an oustanding app and keeping Apple at bay, she did not expect everyone to be motivated only by that goal.</p>

<p>I do want to mention that understanding people is not the same thing as understanding them enough to be able to get what you want out of them. It&rsquo;s not just about pep talking them into working longer hours or throwing more money their way to keep them in the company. I am specifically talking about creating situations where people can give their best and find happiness in what they do. Sometimes it also means finding a new place to work because what they want cannot be achieved in your company.</p>

<p>The same goes for  customer interactions too. I would argue that the best UX designers are people who can empathize with their users. They can keep their personal biases in check when designing for their users. At SupportBee, we don&rsquo;t do many pre-sales calls but we do several customer calls a week to understand why people are facing a problem. I used to think of customer support as a way to help customers, win their loyalty and their social recomendation (and that holds) but not as a defining force in product development. Taking an interest in their business as a whole and not just their issues with SupportBee has helped me understand how to write better software for them. I lacked this perspective in Muziboo and I am not surprised that we failed to create the next big thing even after having significant early traction (over half a million users a couple of years back).</p>

<p>Apart from the experience of working on several products and working with some great people, traveling and living in new countries really helped me open up with people and question my assumptions about things. It also helped me enjoy these interactions and learn from them. Having grown up with a very engineering mindset, I lacked this perspective before and I know I have rubbed people in the wrong way in the past. If I interacted with you or someone you know and wasn&rsquo;t nice, I am sorry.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Essentials skills for becoming a programmer]]></title>
    <link href="http://blog.prateekdayal.net/essentials-skills-for-becoming-a-programmer"/>
    <updated>2013-10-22T10:16:00-07:00</updated>
    <id>http://blog.prateekdayal.net/essentials-skills-for-becoming-a-programmer</id>
    <content type="html"><![CDATA[<p>I have had the fortune of working with some great programmers, not only from the web development world but also from embedded software. I have also had the privilege of teaching some people to code or help them get better. One of the hardest things about teaching people to code is to teach them the non coding skills/mindset needed for a programming job. Based on my experience, here are some of the most important skills that you should learn/understand to be a better programmer</p>

<h3>It&rsquo;s mostly about using other people&rsquo;s code or services</h3>

<p>As much as programming is about writing code, it&rsquo;s a lot more about using other people&rsquo;s code. And most of the code that you&rsquo;ll be using is going to be open source. Open source is a very &lsquo;as-is&rsquo; and &lsquo;fix-your-own-problems&rsquo; kinda community. If you download someone&rsquo;s code and it doesn&rsquo;t work, only you can help it (others might help you but please don&rsquo;t expect them to). You can&rsquo;t write to someone or have someone show you the way (or atleast not as easily). You have to accept this and consider this as part of your workflow. That&rsquo;s why new programmers can&rsquo;t estimate how long it would take them to get to understand how to use other people&rsquo;s code or not get stuck on a problem in trying to use it. So tell yourself that may be half the time you will just be looking at other people&rsquo;s code.</p>

<h3>You&rsquo;ll get stuck a lot &ndash; Learn from it</h3>

<p>Every programmer has streaks of productive sessions but they also have a lot of slow frustrating phases where they can&rsquo;t make much progress. It is often these phases that lead to very fast learning. All programmers improve by making mistakes (often times silly) and learning from them. It&rsquo;s very important to get stuck and find the solution but even more important to learn from the process so you can find the solution faster the next time. Programming is a very failure driven learning domain. Like building muscle strength, you have to fail before you build new skills. Failure in programming is thankfully cheap.</p>

<p><img src="https://d1vijro2f92n44.cloudfront.net/images/team/collage.jpg?1382345000" alt="SupportBee Team" /></p>

<h3>Learning to slow down and patiently read</h3>

<p>Reading is the most important skill in programming. Unlike other walks of life where sometimes the prose is too verbose and people learn to skim through a large text skipping most trivial details, programming is all about reading the details. Programmers usually don&rsquo;t like writing documentation so there is a good chance that they have written as little as they could while still conveying everything important. Reading it is the fastest way of getting to know enough about their code to be able to do the most important things using it. I have seen (and been in) countless cases where one gets stuck for the longest time on something that was mentioned in the README. Or a simple example that you could have adapted to your use-case had you read the README! Open source also has a term for it &ndash; RTFM (Read the friggin manual).</p>

<h3>Resisting the temptation to Google too soon</h3>

<p>Again unlike some other professions where your only source of information can be a google search, programming is a lot about using the information already presented to you. Errors are an excellent example of this. We are trained to close any dialog box without even looking at it. In programming, errors traces often contain the most important information that you need to find your way through. Let&rsquo;s say a nil error is thrown. Which line number triggered the exception? If there is an expression over there, is everything defined? Can you print the value of everything and verify? When programming you need a lot less Google searches than you think. You need a lot more reading than you think.</p>

<h3>You can&rsquo;t even Google most errors</h3>

<p>A lot of errors messages are specific to your environment or setup.  For example a path to a file you are missing. Googling this will not lead to much and you will have to read the trace anyway to figure out the most important part and google it.</p>

<h3>Getting comfortable with the terminal</h3>

<p>One of the most important tools of the trade is the command line. Sure there are integrated development environments but they only end up confusing people more by making more things look like magic. You are better off using a terminal and understanding how things work. A working knowledge of the file system, exit codes and unix tools like grep goes a long way in becoming a better programmer. If you have some free time, instead of whipping out a new web app, you might be better off taking an existing code base and deploying it to a virtual machine on amazon. Setting up a server can teach you the most amazing things that years of writing code can&rsquo;t.</p>

<h3>Accepting that programming is not just about banging out code</h3>

<p>The most important thing to keep in mind is that programming is a wrong term for what you are most likely going to do. You are in the business of writing software and that involves understanding customers, understanding the technology, understanding deployment, backups and a host of other things. If you only count time spent on the keyboard writing actual code as programming time, you will always end up feeling very unproductive and in the end, demotivated. Time spent reading, debugging, deploying or isolating a rare bug is an important part of programming. You can&rsquo;t separate that from writing code.</p>

<p>I have some more thoughts on debugging etc but may be in another post :) I would really love to hear your feedback on this post as this is something I have been thinking a lot about lately. I would love to avoid an echo chamber here! If you would like to work with us, please checkout our <a href="https://supportbee.com/careers">careers page</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Businesses and Scale]]></title>
    <link href="http://blog.prateekdayal.net/about-businesses-and-scale"/>
    <updated>2013-10-19T10:00:00-07:00</updated>
    <id>http://blog.prateekdayal.net/about-businesses-and-scale</id>
    <content type="html"><![CDATA[<p>One of the great things about traveling is getting to see new perspectives and meeting different people. One of the thing I found very interesting in this trip is the dynamics of local businesses. Every small town I passed by when riding riding from Ho Chi Minh City to Mui Ne has atleast a few small shops. Small restaurants (more like a lady selling noodle soup), motor bike repair shops and little shops for buying basic household stuff (and coke ofcourse). Many of these shops offer multiple services. Small grocery shops might be selling gasoline (lack of a full blown petrol bunk turned to a business opportunity) or selling mobile top-ups or may be even vietnamese coffee. Some shops would also offer &lsquo;pay to park&rsquo; services to motor bike riders. In the tourist town of Mui Ne, where I am writing this blog post from, most shops offer multiple services to make their monthly income. The markup on selling gasoline will probably add two dollars a day to their income. People are glad if they can make the same money month after month and figure out a way to meet all their expeneses. These shops feed families and put kids through school. The families eat simple meals (the shop is mostly an extension of their house so you can always get a sneak peek into their lives) and overall seem pretty content.</p>

<p>This is in stark contrast to the online world.  Small Businesses with five or ten people making tens of thousands of dollars a month, working on stuff they enjoy with an unparalleled sense of freedom and control have to keep a sorry face for running a &lsquo;lifestyle business&rsquo;. Most of the founders I know (myself included) grew up in a middle class environment with access to good education but not much more disposable cash to pursue our ideas. Today it&rsquo;s in anyone&rsquo;s reach to start a company and scale it to the point where you have a team and enough cashflows from customers to start shooting higher &ndash; making bigger bets. By the very nature of the internet, every company that starts in internet has access to an open market, best tools and people. Instead of encouraging more people to start companies and change their lives and lives of a few more people around them, we worry only about &lsquo;scale&rsquo; and raising money to somehow get to that &lsquo;scale&rsquo; and not &lsquo;fail&rsquo;. Scale is a given on the internet if you have a great product. We are incredibly fortunate to be an industry like that. If you are worrying about scale, you are worrying about the wrong problem. If you have a truly outstanding product (and you can get there over time), you will achieve scale. May be a few years here or there. Who gives a shit?</p>

<p>Startups are very high pressure. If you can bootstrap a business and hit profitability, pat your self on the back. And pat anyone else who gets there as well &ndash; You are already past the hardest part. I wish more founders and their teams enjoyed the freedom that startups can buy them. The freedom to work on stuff that they care about, the freedom from corporate bullshit and the freedom to take time off to do what they enjoy in life.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Driving Long Distance]]></title>
    <link href="http://blog.prateekdayal.net/driving-long-distance"/>
    <updated>2013-10-16T11:27:00-07:00</updated>
    <id>http://blog.prateekdayal.net/driving-long-distance</id>
    <content type="html"><![CDATA[<p>Growing up as a kid, my Dad had a car (an old Fiat). We also happened to live in the city of Agra, home to the Taj Mahal. Back in the days, families went to meet each other for holidays! Taj Mahal being on the list of everyone’s must visit monuments, our relatives kept flowing one after the other to our house in Agra over the years that we stayed there. Given this unique combination of living in a city full of historic sites and a car, my dad happened to drive a lot and I went along in every trip. That was one of my favorite parts of growing up as a kid. I remember driving through the same routes with different relatives. Some of these monuments were a bit farther out and it took an hour or may be two to get there. Once we got there, we would hang out and part of hanging out was eating sweets and snacks with my cousins (I am sure there were other relatives around but I mostly rememeber my cousins).</p>

<p>I must have made a connection early on in my mind that past a long drive lies fun. I still don’t understand the desire to drive or ride when there are easier options to take. I must have picked it up from my dad during those drives. Even though he never really said how much he enjoyed them, I think as a kid it’s easy to pick up when someone is feeling really happy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hobbies]]></title>
    <link href="http://blog.prateekdayal.net/hobbies"/>
    <updated>2013-08-25T11:17:00-07:00</updated>
    <id>http://blog.prateekdayal.net/hobbies</id>
    <content type="html"><![CDATA[<p>When I was a kid in school I loved extra curricular activities. I was never really much into sports (except for a little bit of football) but I really had my heart in electronics. Our school gave us 2 hours a week for activities and I opted for electronics (since it was hard to get into computers back then anyway). I started by building small LED toys (we called them disco lights since they would switch from 3 reds to 3 greens and that was my perception of a disco back then!). Slowly I started tinkering more and built a small synthesizer (I think it was 22 keys) and a cassette player and eventually I built a 200 Watts inverter for my house (we used it for many years and then I built a bigger one which we used for many years as well).</p>

<p>Ofcourse I was terrible at it initially. Unlike software, wrong experiments would end up in blown up transistors and overheated and short circuited diodes. It was an exciting time for me though (and an expensive one for my parents). I couldn&rsquo;t wait to get back home from school and start soldering stuff and testing circuits. I  also saved up a lot of my pocket money to buy tools over time. Things like soldering irons and multi-meters and a set of resistors, transistors and other small components. Sometimes I would be out of a component and I would pull one out of another working circuit. I always found a way to keep building. I wasn&rsquo;t doing it to build a startup or sell circuits to my friends in school or anything. I was just doing it because it was exciting.</p>

<p>I kept tinkering with electronics through college but once I graduated and started working I slowly lost touch. I picked up photography a little bit later but once I started working on Muziboo, everything slowly faded into the background. I focused all my creative energies on building Muziboo and then later SupportBee. However now when I take a break from work and I try to engage myself with an activity, I find myself mostly dis-interested in it (or very superficially interested in it). Every now and then a book engages me but I find it very hard to be absorbed by any activity in particular.</p>

<p>When I look back, I can see what happened. For many years, I just kept working non-stop and in the process never paid attention to any other hobby. I found out the hard way that hobbies need to be nurtured or they fade away. It&rsquo;s easy to get obsessed with work and not only burn yourself out but also lose interest in things. For the last year or so, I have been taking more time off and trying different stuff and I am hoping that I&rsquo;ll find something engaging. For now, I&rsquo;ll keep looking.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Feeling Inspired]]></title>
    <link href="http://blog.prateekdayal.net/feeling-inspired"/>
    <updated>2013-07-08T18:10:00-07:00</updated>
    <id>http://blog.prateekdayal.net/feeling-inspired</id>
    <content type="html"><![CDATA[<p>In my younger days, I found inspiration only in a very limited number of things &ndash; seeing great technology in action, reading a great book and ofcourse  in <a href="http://www.amazon.com/Founders-Work-Stories-Startups-Early/dp/1590597141">Founders at Work</a>. I had a hard time appreciating great work in industries or domains that I was not familiar with. What&rsquo;s more, I really felt no need to look deeper elsewhere. That changed in the last few years as I traveled more and talked to more people from different walks of life. Conversations with people outside technology or startup world helped me see new perspectives on things I had always interacted with before, but never paid much attention to. Things like well cooked meals, an attention to the lights in a restaurant or a bar or just better run airlines and more well designed real life systems. It was amazing to me how much difference attention to details in these things mattered and changed your experience as a consumer. Just like it&rsquo;s always amazing to watch great programmers code and talk about code, I was amazed watching a great hairdresser in action or an office manager at work.</p>

<p>I still look up to <a href="http://en.wikipedia.org/wiki/Jack_Dorsey">Jack Dorsey</a> or <a href="http://en.wikipedia.org/wiki/Elon_Musk">Elon Musk</a> for inspiration but now I also find it around me in people and things that I did not observe closely before. They inspire me to do great work and serve my customers better as much as the role models I have in the startup world.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[New Thoughts - New Blog]]></title>
    <link href="http://blog.prateekdayal.net/new-blog"/>
    <updated>2013-07-04T16:08:00-07:00</updated>
    <id>http://blog.prateekdayal.net/new-blog</id>
    <content type="html"><![CDATA[<p>Over the last few years, I almost neglected my personal blog. I got busy with SupportBee and travel but the bigger reason was that I wasn&rsquo;t sure of what to write about on my blog. A lot of my writing involved SupportBee and technology and went on the SupportBee Blog and Devblog. Also short thoughts went on to Twitter.</p>

<p>The last time I wrote about a new experience was back in September 2010 when I wrote about the <a href="http://www.prateekdayal.net/2010/09/19/why-we-nee-more-lifestyle-businesses/">cafe culture in Vietnam</a>. Since then I have traveled a lot more, met a lot more people and had a chance to think about life and work. Lately, I feel the urge to write again and write about more things. Not just startups but many other experiences and perspectives. Since this is a very different theme from my old blog, I have decided to archive my old blog and start afresh. I welcome you to my new blog. I hope to post atleast once a month on things that interest me personally. Thank you for reading :)</p>

<p>I am using <a href="http://octopress.org/">Octopress</a> for this blog, which was very easy to install and setup on Github. Thank you Octopress!</p>
]]></content>
  </entry>
  
</feed>
